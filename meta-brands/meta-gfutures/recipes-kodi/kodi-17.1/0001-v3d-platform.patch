diff -Nur a/configure.ac b-hd/configure.ac
--- a/configure.ac	2017-02-01 19:47:32.000000000 +0100
+++ b-hd/configure.ac	2017-03-11 11:51:47.751818000 +0100
@@ -681,6 +681,15 @@
      use_neon=yes
      use_cpu=cortex-a7
      ;;
+  v3d)
+     target_platform=target_v3d
+     use_cpu=cortex-a15
+     use_x11=no
+     use_alsa=yes
+     use_pulse=no
+     use_openmax=no
+     use_optical_drive=no
+     ;;
 esac
 
 if test "$target_platform" = "target_raspberry_pi" ; then
@@ -696,6 +705,12 @@
      CXXFLAGS="$CXXFLAGS"
 fi
 
+if test "$target_platform" = "target_v3d" ; then
+     USE_V3D=1
+     CFLAGS="$CFLAGS"
+     CXXFLAGS="$CXXFLAGS"
+fi
+
 if test "$host_vendor" = "apple"; then
   use_avahi=no
   use_alsa=no
@@ -819,6 +834,15 @@
       [ CFLAGS="$SAVE_CFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
         CXXFLAGS="$CXXFLAGS -Wa,-march=armv6 -mtune=cortex-a8 -mthumb-interwork"
         use_cpu=cortex-a8])
+  elif test "$use_cpu" = "cortex-a15"; then
+    # Compile for ARMv7ve architecture
+    SAVE_CFLAGS="$CFLAGS"
+    CFLAGS="-mfpu=neon-vfpv4"
+    AC_COMPILE_IFELSE(
+      [AC_LANG_SOURCE([int foo;])],
+      [ CFLAGS="$SAVE_CFLAGS -Wno-psabi -Wa,-march=armv7ve -mtune=cortex-a15 -mfpu=neon-vfpv4 -mthumb-interwork"
+        CXXFLAGS="$CXXFLAGS -Wno-psabi -Wa,-march=armv7ve -mtune=cortex-a15 -mfpu=neon-vfpv4 -mthumb-interwork"
+        use_cpu=cortex-a15])
   else
     if test "$use_neon" = "yes"; then
       CFLAGS="$CFLAGS -mfpu=neon -mvectorize-with-neon-quad"
@@ -944,16 +968,19 @@
     AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
     AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
     AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
-  else
-    if test "$target_platform" = "target_raspberry_pi"; then
+  elif test "$target_platform" = "target_raspberry_pi"; then
       AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
       AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
       AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
       LIBS="$LIBS -lEGL -lGLESv2 -lbcm_host -lvcos -lvchiq_arm -lmmal -lmmal_core -lmmal_util -lvcsm"
-    else
+  elif test "$target_platform" = "target_v3d"; then
+      AC_DEFINE([HAVE_LIBEGL],[1],["Define to 1 if you have the `EGL' library (-lEGL)."])
+      AC_DEFINE([HAVE_LIBGLESV2],[1],["Define to 1 if you have the `GLESv2' library (-lGLESv2)."])
+      AC_MSG_RESULT(== WARNING: OpenGLES support is assumed.)
+      LIBS="$LIBS -lEGL -lGLESv2 -lnxpl -lnexus"
+  else
       AC_CHECK_LIB([EGL],   [main],, AC_MSG_ERROR($missing_library))
       AC_CHECK_LIB([GLESv2],[main],, AC_MSG_ERROR($missing_library))
-    fi
   fi
 else
   if test "$use_gl" = "yes"; then
@@ -1056,7 +1083,7 @@
   )])
 AC_LANG_POP([C++])
 
-if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android"; then
+if test "${target_platform}" = "target_linux" || test "${target_platform}" = "target_raspberry_pi" || test "${target_platform}" = "target_android" || test "${target_platform}" = "target_v3d"; then
   PKG_CHECK_MODULES([UUID], [uuid],, AC_MSG_ERROR(libuuid not found))
 fi
 
@@ -1554,9 +1581,17 @@
     pkg_cfg_prefix="${PKG_CONFIG_SYSROOT_DIR}"
   elif test "${target_platform}" = "target_raspberry_pi" && test "${USE_BUILDROOT}" = "1"; then
       pkg_cfg_prefix=${SYSROOT}
-  fi
 
-  if test "$cross_compiling" != "yes"; then
+  fi
+  
+  if test "$with_ffmpeg" = "v3d"; then
+    AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
+    CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" LDFLAGS="$LDFLAGS" NM="$NM" AR="$AR" \
+    AS="$AS" STRIP="$STRIP" CC="$CC" CXX="$CXX" LD="$CCLD" RANLIB="$RANLIB" \
+    ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS} ${PARALLEL_MAKE} --arch=generic
+    export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
+  
+  elif test "$cross_compiling" != "yes"; then
     if test "$use_debug" != "yes"; then
       FFMPEG_OPTS="-r"
     fi
@@ -1592,7 +1627,7 @@
         CFLAGS="$CFLAGS" CXXFLAGS="$CXXFLAGS" ${ffmpeg_build}/autobuild.sh ${FFMPEG_OPTS}
         export PKG_CONFIG_PATH="${ffmpeg_build}/ffmpeg-install/lib/pkgconfig:$PKG_CONFIG_PATH"
       fi
-
+ 
     elif test "$with_ffmpeg" = "force"; then
       # always build our ffmpeg
       AC_MSG_NOTICE("FFmpeg installation forced by user - installing our version")
@@ -1611,11 +1646,17 @@
   PKG_CHECK_MODULES([FFMPEG], [$FFMPEG_LIBNAMES],
     [INCLUDES="$INCLUDES $FFMPEG_CFLAGS"; LIBS="$LIBS $FFMPEG_LIBS"; FFMPEG_FOUND="true"],
     [AC_MSG_ERROR("ffmpeg not found")])
+    if test "$with_ffmpeg" = "v3d"; then
+      FFMPEG_LIBS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --libs libavcodec 2>/dev/null)
+      FFMPEG_CFLAGS=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --cflags libavcodec 2>/dev/null)
+      INCLUDES="$INCLUDES $FFMPEG_CFLAGS"
+      LIBS="$LIBS $FFMPEG_LIBS"
+    fi
 fi
 
 if test "${USE_STATIC_FFMPEG}" = "1"; then
   # get the libdir for static linking
-  FFMPEG_LIBDIR=${pkg_cfg_prefix}$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
+  FFMPEG_LIBDIR=$(PKG_CONFIG_SYSROOT_DIR="" ${PKG_CONFIG} --static --variable=libdir libavcodec)
   GNUTLS_ALL_LIBS=$(${PKG_CONFIG} --static --libs-only-l --silence-errors gnutls)
 
   # check if static libs are available
@@ -2329,6 +2370,7 @@
 AC_SUBST(USE_MMAL)
 AC_SUBST(USE_X11)
 AC_SUBST(USE_OPTICAL_DRIVE)
+AC_SUBST(USE_V3D)
 
 # pushd and popd are not available in other shells besides bash, so implement
 # our own pushd/popd functions
diff -Nur a/m4/xbmc_arch.m4 b-hd/m4/xbmc_arch.m4
--- a/m4/xbmc_arch.m4	2017-02-01 19:47:32.000000000 +0100
+++ b-hd/m4/xbmc_arch.m4	2017-03-11 09:09:13.011058000 +0100
@@ -80,4 +80,8 @@
 if test "$target_platform" = "target_raspberry_pi" ; then
   AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -D_ARMEL -DTARGET_RASPBERRY_PI")
 fi
+
+if test "$target_platform" = "target_v3d" ; then
+  AC_SUBST(ARCH_DEFINES, "-DTARGET_POSIX -DTARGET_LINUX -D_LINUX -DTARGET_V3D")
+fi
 ])
diff -Nur a/project/cmake/scripts/linux/ArchSetup.cmake b-hd/project/cmake/scripts/linux/ArchSetup.cmake
--- a/project/cmake/scripts/linux/ArchSetup.cmake	2017-02-01 19:47:32.000000000 +0100
+++ b-hd/project/cmake/scripts/linux/ArchSetup.cmake	2017-03-11 09:09:13.079282000 +0100
@@ -13,7 +13,11 @@
     set(ARCH i486-linux)
     set(NEON False)
     add_options(CXX ALL_BUILDS "-msse")
-  elseif(CPU MATCHES arm)
+  elseif(CPU MATCHES cortex-a15)
+    set(ARCH arm)
+    set(NEON True)
+    set(NEON_FLAGS "-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4 -mvectorize-with-neon-quad")
+  elseif(CPU MATCHES arm )
     set(ARCH arm)
     set(NEON True)
     set(NEON_FLAGS "-mfpu=neon -mvectorize-with-neon-quad")
diff -Nur a/tools/depends/configure.ac b-hd/tools/depends/configure.ac
--- a/tools/depends/configure.ac	2017-02-01 19:47:32.000000000 +0100
+++ b-hd/tools/depends/configure.ac	2017-03-11 09:09:13.132565000 +0100
@@ -408,6 +408,14 @@
      platform_cxxflags="-fPIC -mcpu=cortex-a7 -mfloat-abi=hard -mfpu=neon-vfpv4"
      platform_ldflags="-lpthread"
      ;;
+  v3d)
+     target_platform=v3d
+     use_neon=yes
+     use_cpu=cortex-a15
+     platform_cflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_cxxflags="-fPIC -mcpu=cortex-a15 -mfloat-abi=hard -mfpu=neon-vfpv4"
+     platform_ldflags="-lpthread"
+     ;;
 esac
 
 if test "$target_platform" = "raspberry-pi" ; then
diff -Nur a/xbmc/addons/AddonManager.cpp b-hd/xbmc/addons/AddonManager.cpp
--- a/xbmc/addons/AddonManager.cpp	2017-02-01 19:47:32.000000000 +0100
+++ b-hd/xbmc/addons/AddonManager.cpp	2017-03-11 09:09:13.186660000 +0100
@@ -936,6 +936,9 @@
 #elif defined(TARGET_RASPBERRY_PI)
     "rbpi",
     "linux",
+#elif defined(TARGET_V3D)
+    "v3d",
+    "linux",
 #elif defined(TARGET_FREEBSD)
     "freebsd",
     "linux",
@@ -1028,6 +1031,9 @@
 #elif defined(TARGET_RASPBERRY_PI)
   libraryName = GetExtValue(base, "@library_rbpi");
   if (libraryName.empty())
+#elif defined(TARGET_V3D)
+  libraryName = GetExtValue(base, "@library_v3d");
+  if (libraryName.empty())
 #endif
   libraryName = GetExtValue(base, "@library_linux");
 #elif defined(TARGET_WINDOWS) && defined(HAS_DX)
